{"ts":1352698274211,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#include\"Procedure.h\"\n\n/*******************************************************************************\n *\n * Standard constructor inherited from Symbol. See Symbol.\n */\nProcedure::Procedure(string name) :\n        Symbol(name)\n{\n}\n\n/*******************************************************************************\n *\n * Add a new parameter that must be given when calling the procedure. Also, \n * checks if the parameter can be added. A parameter may not be able to be added\n * if a parameter with the same name already exits.\n *\n * @param param - the parameter to add.\n * @return true if the parameter can be added (does not already exist), \n *          otherwise false.\n */\nbool Procedure::addParameter(const Parameter &param)\n{\n    if (hasParameter(param.name)) {\n        return false;\n    }\n    parameters.push_back(param);\n    return true;\n}\n\n/*******************************************************************************\n *\n * Checks if the procedure has a parameter with a given name. Returns true if\n * it does, otherwise false.\n * \n * @param paramName - paramName to search for.\n * @return return true if paramater exists in vector, false otherwise.\n */\nbool Procedure::hasParameter(const string &paramName) const\n{\n    \n    std::vector<Parameter>::const_iterator it;\n    for(it = parameters.begin(); it != parameters.end(); it++) {\n        if (it->name == paramName) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid Procedure::print(std::ostream& out) const\n{\n    out << name;\n\t//out << \" \" << parameters; \n}\n"]],"start1":0,"start2":0,"length1":0,"length2":1540}]],"length":1540}
